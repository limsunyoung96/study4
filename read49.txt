read49.txt

- 설정파일 분리
	context-main.xml : scan, property
	context-datasource : datasource, mybatis
	context-aspect : aop
	context-transaction
	

- AOP 개념
	- Core Concern: (핵심 관심사) 설계 해야될 업무 조직
	- Crosscutting Concern: (횡단 관심사) 시스템적으로 필요한 기능 (로깅, 보안, 트랜젝션 등)
	
	Proxy 객체 구현: 해당 객체가 인터페이스를 구현했으면, 프록시도 해당 인터페이스를 구현
					: 일반 객체이면 상속을 통해 구현
					: 일반 객체가 final인 경우 AOP가 적용 안될 수 있다.

	Advice 구현시 첫번째 인자는 JoinPoint
		JoinPoint 주요 메소드
			.getTarget(): 대상객체(원본)
			.getTarget().getClass().getSimpleName(): 클래스명
			.getSignature().getName(): 메서드 명
			.getArgs() -> Object[] 리턴
			
		단, Around JoinPoint인 경우
			내부에서 원본을 호출해야 하기 때문에 ProceedingJoinPoint 제공
			추가된 메소드
			.proceed() : 원본 호출, 리턴은 Object 
			
			
		execution 표기법
		
		*는 필수, []는 선택사항(옵션)
		execution( [접근제어자] *(리턴) [팩키지, 클래스] *(..) )
			리턴타입 필수 : 일반적으로 * 사용
			메서드명 필수: *, insert*, get* 사용 가능
			파라미터에서: ".."은 모든 아규먼트를 뜻함
		
- transaction 에서
	rollback의 대상은 RuntimeException 에러가 발생했을 때
	 

- File upload/download

- Mybatis - resultmap 사용
	table 1 : 1 - association 관계
			1 : N - collection 관계
			 
