read41.txt

과제 : com.study.member.web.MemberController 작성 

  공통코드 : 직업목록, 취미목록은 별도 메서드로 분리하여 처리  
  memberList 반환이 void 로 해서 작성 
  memberForm 반환이 void 로 해서 작성 
  memberRegist 반환이 MAV , @RequestMapping 에서 POST 제한
  memberView 반환 String, @RequestMapping 에서 memId 파라미터가 존재하도록 제한
  memberEdit 반환 String, @RequestMapping 에서 memId 파라미터가 존재하도록 제한
  memberModify 반환 String, @RequestMapping 에서 memId 파라미터, POST 제한
  memberDelete 반환 String, @RequestMapping 에서 memId, memPass파라미터, POST 제한
  
  freeList.wow?wow=xis
  freeList.wow?wow=json
  freeList.wow?wow=hwp
  
 -- 모든 컨트롤러에 로그 처리
 	넘겨진 파라미터는 꼭 debug 처리
 	예외는 error로 처리
 	System.out.println() 모두 제거
 	
 
 --뷰 정보 파일: freeEdit.jsp는
 	- 글 번호가 존재할 때 수정입력을 위한 뷰 이면서 (freeEdit.wow?boNo=17)
 	- 글 수정처리 요청시 검증 오류를 보여줄 수 있는 화면
 	
 Bean Validation  

javax.validation.constraints. 

하이버네이트에서 확장된 어노테이션 
org.hibernate.validator.constraints.
@URL; @Range; @CreditCardNumber; @Email; @NotBlank; @NotEmpty;

 freeEdit.jsp에서 스프릴 폼태그를 사용할건데
 spring 4.2 전에는 commandName, 그 이후에는 modelAttribute
 
 modelAttribute 기술시: 모델정보(속성)가 꼭 존재해야 합니다.
 
 ********** 과제: freeRegist.wow 처리시 유효성 검증에 실패시 freeForm.jsp로 뷰 이동

1. Spring Validator를 구현한 객체로 검증
  -- 등록할 때, 수정할 때 별개로 해서 구성 
      (BoardRegistValidator , BoardModifyValidator .. )
      
2. @Valid 로 자동 검증 
  -- Spring Validator를  구현하지 않아도 되죠... 
  
  -- 등록할 때, 수정할 때 별개로 해야 하는데.... 음.. 
  어노테이션 속성에 group 을 활용해서 구현하실수 있습니다.
  기존 @Valid 는 아직 구현되지 않아서 
  스프링에서 제공하는 @Validated  어노테이션을 사용해야 합니다. 
   
  com.study.common.valid 에 RegistType, ModifyType 인터페이스 생성(껍데기만)  
  -- 모등 검증 어노테이션에 groups 를 기술..안하셔도 되는데...
  -- 스프링 Default 라는것을 기술하시면 됩니다. @Validated 에.... 
     javax.validation.groups.Default 클래스 넣어주세요
     
  
  -- 게시판 수정, 수정처리 부분을 최대한 스프링답게 해주세요 
   boardEdit.jsp 도 기존것 백업하시고 최대한 스프링 폼 태그 적용해주시고
   해당 컨트롤러 매핑 메서드에도 @Valid 적용해주시고 깔끔하게...

@Resource 
 : JSR-250에서 injection지원을 위한 어노테이션 
 : 필드 또는 속성의 setter 메서드에서 사용
 : 이름기반으로 동작 , 만약 이름이 없다면 해당 필드, 메서드의 이름으로 유추한다. 
 : 만약 해당 메서드에 2개이상이 경우에는 @Autowired 를 사용 